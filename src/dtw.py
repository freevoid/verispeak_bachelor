# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dtw', [dirname(__file__)])
        except ImportError:
            import _dtw
            return _dtw
        if fp is not None:
            try:
                _mod = imp.load_module('_dtw', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dtw = swig_import_helper()
    del swig_import_helper
else:
    import _dtw
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dtw.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _dtw.SwigPyIterator_value(self)
    def incr(self, n = 1): return _dtw.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _dtw.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _dtw.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _dtw.SwigPyIterator_equal(self, *args)
    def copy(self): return _dtw.SwigPyIterator_copy(self)
    def next(self): return _dtw.SwigPyIterator_next(self)
    def __next__(self): return _dtw.SwigPyIterator___next__(self)
    def previous(self): return _dtw.SwigPyIterator_previous(self)
    def advance(self, *args): return _dtw.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _dtw.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _dtw.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _dtw.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _dtw.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _dtw.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _dtw.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _dtw.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _dtw.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _dtw.vectord___nonzero__(self)
    def __bool__(self): return _dtw.vectord___bool__(self)
    def __len__(self): return _dtw.vectord___len__(self)
    def pop(self): return _dtw.vectord_pop(self)
    def __getslice__(self, *args): return _dtw.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _dtw.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _dtw.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _dtw.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _dtw.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _dtw.vectord___setitem__(self, *args)
    def append(self, *args): return _dtw.vectord_append(self, *args)
    def empty(self): return _dtw.vectord_empty(self)
    def size(self): return _dtw.vectord_size(self)
    def clear(self): return _dtw.vectord_clear(self)
    def swap(self, *args): return _dtw.vectord_swap(self, *args)
    def get_allocator(self): return _dtw.vectord_get_allocator(self)
    def begin(self): return _dtw.vectord_begin(self)
    def end(self): return _dtw.vectord_end(self)
    def rbegin(self): return _dtw.vectord_rbegin(self)
    def rend(self): return _dtw.vectord_rend(self)
    def pop_back(self): return _dtw.vectord_pop_back(self)
    def erase(self, *args): return _dtw.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _dtw.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _dtw.vectord_push_back(self, *args)
    def front(self): return _dtw.vectord_front(self)
    def back(self): return _dtw.vectord_back(self)
    def assign(self, *args): return _dtw.vectord_assign(self, *args)
    def resize(self, *args): return _dtw.vectord_resize(self, *args)
    def insert(self, *args): return _dtw.vectord_insert(self, *args)
    def reserve(self, *args): return _dtw.vectord_reserve(self, *args)
    def capacity(self): return _dtw.vectord_capacity(self)
    __swig_destroy__ = _dtw.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _dtw.vectord_swigregister
vectord_swigregister(vectord)

class MathUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MathUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MathUtil, name)
    __repr__ = _swig_repr
    __swig_getmethods__["min"] = lambda x: _dtw.MathUtil_min
    if _newclass:min = staticmethod(_dtw.MathUtil_min)
    __swig_getmethods__["max"] = lambda x: _dtw.MathUtil_max
    if _newclass:max = staticmethod(_dtw.MathUtil_max)
    def __init__(self): 
        this = _dtw.new_MathUtil()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dtw.delete_MathUtil
    __del__ = lambda self : None;
MathUtil_swigregister = _dtw.MathUtil_swigregister
MathUtil_swigregister(MathUtil)

def MathUtil_min(*args):
  return _dtw.MathUtil_min(*args)
MathUtil_min = _dtw.MathUtil_min

def MathUtil_max(*args):
  return _dtw.MathUtil_max(*args)
MathUtil_max = _dtw.MathUtil_max

class dtw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtw, name)
    __repr__ = _swig_repr
    verbose = _dtw.dtw_verbose
    vverbose = _dtw.dtw_vverbose
    INF = _dtw.dtw_INF
    fast = _dtw.dtw_fast
    __swig_getmethods__["max"] = lambda x: _dtw.dtw_max
    if _newclass:max = staticmethod(_dtw.dtw_max)
    __swig_getmethods__["min"] = lambda x: _dtw.dtw_min
    if _newclass:min = staticmethod(_dtw.dtw_min)
    def __init__(self, *args): 
        this = _dtw.new_dtw(*args)
        try: self.this.append(this)
        except: self.this = this
    def fastdynamic(self, *args): return _dtw.dtw_fastdynamic(self, *args)
    __swig_setmethods__["mGamma"] = _dtw.dtw_mGamma_set
    __swig_getmethods__["mGamma"] = _dtw.dtw_mGamma_get
    if _newclass:mGamma = _swig_property(_dtw.dtw_mGamma_get, _dtw.dtw_mGamma_set)
    __swig_setmethods__["mN"] = _dtw.dtw_mN_set
    __swig_getmethods__["mN"] = _dtw.dtw_mN_get
    if _newclass:mN = _swig_property(_dtw.dtw_mN_get, _dtw.dtw_mN_set)
    __swig_setmethods__["mConstraint"] = _dtw.dtw_mConstraint_set
    __swig_getmethods__["mConstraint"] = _dtw.dtw_mConstraint_get
    if _newclass:mConstraint = _swig_property(_dtw.dtw_mConstraint_get, _dtw.dtw_mConstraint_set)
    __swig_getmethods__["dynamic"] = lambda x: _dtw.dtw_dynamic
    if _newclass:dynamic = staticmethod(_dtw.dtw_dynamic)
    __swig_destroy__ = _dtw.delete_dtw
    __del__ = lambda self : None;
dtw_swigregister = _dtw.dtw_swigregister
dtw_swigregister(dtw)

def dtw_max(*args):
  return _dtw.dtw_max(*args)
dtw_max = _dtw.dtw_max

def dtw_min(*args):
  return _dtw.dtw_min(*args)
dtw_min = _dtw.dtw_min

def dtw_dynamic(*args):
  return _dtw.dtw_dynamic(*args)
dtw_dynamic = _dtw.dtw_dynamic


def computeEnvelope(*args):
  return _dtw.computeEnvelope(*args)
computeEnvelope = _dtw.computeEnvelope
class NearestNeighbor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NearestNeighbor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NearestNeighbor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dtw.new_NearestNeighbor(*args)
        try: self.this.append(this)
        except: self.this = this
    def test(self, *args): return _dtw.NearestNeighbor_test(self, *args)
    def getLowestCost(self): return _dtw.NearestNeighbor_getLowestCost(self)
    __swig_destroy__ = _dtw.delete_NearestNeighbor
    __del__ = lambda self : None;
    def getNumberOfDTW(self): return _dtw.NearestNeighbor_getNumberOfDTW(self)
    def getNumberOfCandidates(self): return _dtw.NearestNeighbor_getNumberOfCandidates(self)
    __swig_setmethods__["mDTW"] = _dtw.NearestNeighbor_mDTW_set
    __swig_getmethods__["mDTW"] = _dtw.NearestNeighbor_mDTW_get
    if _newclass:mDTW = _swig_property(_dtw.NearestNeighbor_mDTW_get, _dtw.NearestNeighbor_mDTW_set)
NearestNeighbor_swigregister = _dtw.NearestNeighbor_swigregister
NearestNeighbor_swigregister(NearestNeighbor)

class NaiveNearestNeighbor(NearestNeighbor):
    __swig_setmethods__ = {}
    for _s in [NearestNeighbor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NaiveNearestNeighbor, name, value)
    __swig_getmethods__ = {}
    for _s in [NearestNeighbor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NaiveNearestNeighbor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dtw.new_NaiveNearestNeighbor(*args)
        try: self.this.append(this)
        except: self.this = this
    def test(self, *args): return _dtw.NaiveNearestNeighbor_test(self, *args)
    def resetStatistics(self): return _dtw.NaiveNearestNeighbor_resetStatistics(self)
    def getLowestCost(self): return _dtw.NaiveNearestNeighbor_getLowestCost(self)
    def getNumberOfDTW(self): return _dtw.NaiveNearestNeighbor_getNumberOfDTW(self)
    def getNumberOfCandidates(self): return _dtw.NaiveNearestNeighbor_getNumberOfCandidates(self)
    __swig_destroy__ = _dtw.delete_NaiveNearestNeighbor
    __del__ = lambda self : None;
NaiveNearestNeighbor_swigregister = _dtw.NaiveNearestNeighbor_swigregister
NaiveNearestNeighbor_swigregister(NaiveNearestNeighbor)

class LB_Keogh(NearestNeighbor):
    __swig_setmethods__ = {}
    for _s in [NearestNeighbor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LB_Keogh, name, value)
    __swig_getmethods__ = {}
    for _s in [NearestNeighbor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LB_Keogh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dtw.new_LB_Keogh(*args)
        try: self.this.append(this)
        except: self.this = this
    def justlb(self, *args): return _dtw.LB_Keogh_justlb(self, *args)
    def test(self, *args): return _dtw.LB_Keogh_test(self, *args)
    def getNumberOfDTW(self): return _dtw.LB_Keogh_getNumberOfDTW(self)
    def getNumberOfCandidates(self): return _dtw.LB_Keogh_getNumberOfCandidates(self)
    def getLowestCost(self): return _dtw.LB_Keogh_getLowestCost(self)
    def resetStatistics(self): return _dtw.LB_Keogh_resetStatistics(self)
    __swig_destroy__ = _dtw.delete_LB_Keogh
    __del__ = lambda self : None;
LB_Keogh_swigregister = _dtw.LB_Keogh_swigregister
LB_Keogh_swigregister(LB_Keogh)

class LB_KeoghEarly(NearestNeighbor):
    __swig_setmethods__ = {}
    for _s in [NearestNeighbor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LB_KeoghEarly, name, value)
    __swig_getmethods__ = {}
    for _s in [NearestNeighbor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LB_KeoghEarly, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dtw.new_LB_KeoghEarly(*args)
        try: self.this.append(this)
        except: self.this = this
    def test(self, *args): return _dtw.LB_KeoghEarly_test(self, *args)
    def getNumberOfDTW(self): return _dtw.LB_KeoghEarly_getNumberOfDTW(self)
    def getNumberOfCandidates(self): return _dtw.LB_KeoghEarly_getNumberOfCandidates(self)
    def getLowestCost(self): return _dtw.LB_KeoghEarly_getLowestCost(self)
    def resetStatistics(self): return _dtw.LB_KeoghEarly_resetStatistics(self)
    __swig_destroy__ = _dtw.delete_LB_KeoghEarly
    __del__ = lambda self : None;
LB_KeoghEarly_swigregister = _dtw.LB_KeoghEarly_swigregister
LB_KeoghEarly_swigregister(LB_KeoghEarly)

class LB_Improved(NearestNeighbor):
    __swig_setmethods__ = {}
    for _s in [NearestNeighbor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LB_Improved, name, value)
    __swig_getmethods__ = {}
    for _s in [NearestNeighbor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LB_Improved, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dtw.new_LB_Improved(*args)
        try: self.this.append(this)
        except: self.this = this
    def resetStatistics(self): return _dtw.LB_Improved_resetStatistics(self)
    def justlb(self, *args): return _dtw.LB_Improved_justlb(self, *args)
    def test(self, *args): return _dtw.LB_Improved_test(self, *args)
    def dumpTextDescriptor(self, *args): return _dtw.LB_Improved_dumpTextDescriptor(self, *args)
    def getNumberOfDTW(self): return _dtw.LB_Improved_getNumberOfDTW(self)
    def getNumberOfCandidates(self): return _dtw.LB_Improved_getNumberOfCandidates(self)
    def getLowestCost(self): return _dtw.LB_Improved_getLowestCost(self)
    __swig_destroy__ = _dtw.delete_LB_Improved
    __del__ = lambda self : None;
LB_Improved_swigregister = _dtw.LB_Improved_swigregister
LB_Improved_swigregister(LB_Improved)

class LB_ImprovedEarly(NearestNeighbor):
    __swig_setmethods__ = {}
    for _s in [NearestNeighbor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LB_ImprovedEarly, name, value)
    __swig_getmethods__ = {}
    for _s in [NearestNeighbor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LB_ImprovedEarly, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dtw.new_LB_ImprovedEarly(*args)
        try: self.this.append(this)
        except: self.this = this
    def resetStatistics(self): return _dtw.LB_ImprovedEarly_resetStatistics(self)
    def test(self, *args): return _dtw.LB_ImprovedEarly_test(self, *args)
    def getNumberOfDTW(self): return _dtw.LB_ImprovedEarly_getNumberOfDTW(self)
    def getNumberOfCandidates(self): return _dtw.LB_ImprovedEarly_getNumberOfCandidates(self)
    def getLowestCost(self): return _dtw.LB_ImprovedEarly_getLowestCost(self)
    __swig_destroy__ = _dtw.delete_LB_ImprovedEarly
    __del__ = lambda self : None;
LB_ImprovedEarly_swigregister = _dtw.LB_ImprovedEarly_swigregister
LB_ImprovedEarly_swigregister(LB_ImprovedEarly)


def piecewiseSumReduction(*args):
  return _dtw.piecewiseSumReduction(*args)
piecewiseSumReduction = _dtw.piecewiseSumReduction
class DimReducedLB_Keogh(NearestNeighbor):
    __swig_setmethods__ = {}
    for _s in [NearestNeighbor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimReducedLB_Keogh, name, value)
    __swig_getmethods__ = {}
    for _s in [NearestNeighbor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DimReducedLB_Keogh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dtw.new_DimReducedLB_Keogh(*args)
        try: self.this.append(this)
        except: self.this = this
    def test(self, *args): return _dtw.DimReducedLB_Keogh_test(self, *args)
    def getNumberOfDTW(self): return _dtw.DimReducedLB_Keogh_getNumberOfDTW(self)
    def getNumberOfCandidates(self): return _dtw.DimReducedLB_Keogh_getNumberOfCandidates(self)
    def getLowestCost(self): return _dtw.DimReducedLB_Keogh_getLowestCost(self)
    __swig_destroy__ = _dtw.delete_DimReducedLB_Keogh
    __del__ = lambda self : None;
DimReducedLB_Keogh_swigregister = _dtw.DimReducedLB_Keogh_swigregister
DimReducedLB_Keogh_swigregister(DimReducedLB_Keogh)

class Envelope(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Envelope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Envelope, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _dtw.new_Envelope()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dtw.delete_Envelope
    __del__ = lambda self : None;
    def compute(self, *args): return _dtw.Envelope_compute(self, *args)
    __swig_setmethods__["maxfifo"] = _dtw.Envelope_maxfifo_set
    __swig_getmethods__["maxfifo"] = _dtw.Envelope_maxfifo_get
    if _newclass:maxfifo = _swig_property(_dtw.Envelope_maxfifo_get, _dtw.Envelope_maxfifo_set)
    __swig_setmethods__["minfifo"] = _dtw.Envelope_minfifo_set
    __swig_getmethods__["minfifo"] = _dtw.Envelope_minfifo_get
    if _newclass:minfifo = _swig_property(_dtw.Envelope_minfifo_get, _dtw.Envelope_minfifo_set)
Envelope_swigregister = _dtw.Envelope_swigregister
Envelope_swigregister(Envelope)


def l1diff(*args):
  return _dtw.l1diff(*args)
l1diff = _dtw.l1diff
class TimeSeriesDB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeriesDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeriesDB, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def readTimeSeries(self, *args): return _dtw.TimeSeriesDB_readTimeSeries(self, *args)
    __swig_destroy__ = _dtw.delete_TimeSeriesDB
    __del__ = lambda self : None;
TimeSeriesDB_swigregister = _dtw.TimeSeriesDB_swigregister
TimeSeriesDB_swigregister(TimeSeriesDB)

class TimeSeriesTree(TimeSeriesDB):
    __swig_setmethods__ = {}
    for _s in [TimeSeriesDB]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeriesTree, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeSeriesDB]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeriesTree, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dtw.new_TimeSeriesTree(*args)
        try: self.this.append(this)
        except: self.this = this
    def close(self): return _dtw.TimeSeriesTree_close(self)
    def lock(self): return _dtw.TimeSeriesTree_lock(self)
    def unlock(self): return _dtw.TimeSeriesTree_unlock(self)
    def readTimeSeries(self, *args): return _dtw.TimeSeriesTree_readTimeSeries(self, *args)
    __swig_destroy__ = _dtw.delete_TimeSeriesTree
    __del__ = lambda self : None;
    def good(self): return _dtw.TimeSeriesTree_good(self)
    def add(self, *args): return _dtw.TimeSeriesTree_add(self, *args)
    NAIVE = _dtw.TimeSeriesTree_NAIVE
    LB_KEOGH = _dtw.TimeSeriesTree_LB_KEOGH
    LB_IMPROVED = _dtw.TimeSeriesTree_LB_IMPROVED
    LB_KEOGH_EARLY = _dtw.TimeSeriesTree_LB_KEOGH_EARLY
    LB_IMPROVED_EARLY = _dtw.TimeSeriesTree_LB_IMPROVED_EARLY
    TREE = _dtw.TimeSeriesTree_TREE
    LINEAR = _dtw.TimeSeriesTree_LINEAR
    def getNearestNeighborCost(self, *args): return _dtw.TimeSeriesTree_getNearestNeighborCost(self, *args)
    def getSequentialSearchCandidates(self): return _dtw.TimeSeriesTree_getSequentialSearchCandidates(self)
    def getNumberOfDTW(self): return _dtw.TimeSeriesTree_getNumberOfDTW(self)
    def getNumberOfCandidates(self): return _dtw.TimeSeriesTree_getNumberOfCandidates(self)
    def resetStatistics(self): return _dtw.TimeSeriesTree_resetStatistics(self)
    def getSize(self): return _dtw.TimeSeriesTree_getSize(self)
TimeSeriesTree_swigregister = _dtw.TimeSeriesTree_swigregister
TimeSeriesTree_swigregister(TimeSeriesTree)



